/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PersonaService } from "../persona.service";
import { PersonaCreateInput } from "./PersonaCreateInput";
import { Persona } from "./Persona";
import { PersonaFindManyArgs } from "./PersonaFindManyArgs";
import { PersonaWhereUniqueInput } from "./PersonaWhereUniqueInput";
import { PersonaUpdateInput } from "./PersonaUpdateInput";

export class PersonaControllerBase {
  constructor(protected readonly service: PersonaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Persona })
  async createPersona(
    @common.Body() data: PersonaCreateInput
  ): Promise<Persona> {
    return await this.service.createPersona({
      data: data,
      select: {
        ageRange: true,
        attitudes: true,
        careerPath: true,
        challengesAndPainPoints: true,
        children: true,
        communicationChannels: true,
        competitorProducts: true,
        completed: true,
        createdAt: true,
        culturalAndSocialInfluences: true,
        currentlyPursuing: true,
        definition: true,
        does: true,
        familyStatus: true,
        featureAnalysis: true,
        feels: true,
        gender: true,
        generalLifestyle: true,
        hobbiesAndInterests: true,
        id: true,
        incomeLevel: true,
        location: true,
        mediaChannels: true,
        missingFeatures: true,
        motivationsAndDesires: true,
        name: true,
        needs: true,
        occupation: true,
        otherHabits: true,
        personaAge: true,
        productPreferences: true,
        satisfactionLevels: true,
        says: true,
        technologyUsage: true,
        thinks: true,
        updatedAt: true,
        valuedFeatures: true,
        values: true,
        wantsAndGoals: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Persona] })
  @ApiNestedQuery(PersonaFindManyArgs)
  async personas(@common.Req() request: Request): Promise<Persona[]> {
    const args = plainToClass(PersonaFindManyArgs, request.query);
    return this.service.personas({
      ...args,
      select: {
        ageRange: true,
        attitudes: true,
        careerPath: true,
        challengesAndPainPoints: true,
        children: true,
        communicationChannels: true,
        competitorProducts: true,
        completed: true,
        createdAt: true,
        culturalAndSocialInfluences: true,
        currentlyPursuing: true,
        definition: true,
        does: true,
        familyStatus: true,
        featureAnalysis: true,
        feels: true,
        gender: true,
        generalLifestyle: true,
        hobbiesAndInterests: true,
        id: true,
        incomeLevel: true,
        location: true,
        mediaChannels: true,
        missingFeatures: true,
        motivationsAndDesires: true,
        name: true,
        needs: true,
        occupation: true,
        otherHabits: true,
        personaAge: true,
        productPreferences: true,
        satisfactionLevels: true,
        says: true,
        technologyUsage: true,
        thinks: true,
        updatedAt: true,
        valuedFeatures: true,
        values: true,
        wantsAndGoals: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Persona })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async persona(
    @common.Param() params: PersonaWhereUniqueInput
  ): Promise<Persona | null> {
    const result = await this.service.persona({
      where: params,
      select: {
        ageRange: true,
        attitudes: true,
        careerPath: true,
        challengesAndPainPoints: true,
        children: true,
        communicationChannels: true,
        competitorProducts: true,
        completed: true,
        createdAt: true,
        culturalAndSocialInfluences: true,
        currentlyPursuing: true,
        definition: true,
        does: true,
        familyStatus: true,
        featureAnalysis: true,
        feels: true,
        gender: true,
        generalLifestyle: true,
        hobbiesAndInterests: true,
        id: true,
        incomeLevel: true,
        location: true,
        mediaChannels: true,
        missingFeatures: true,
        motivationsAndDesires: true,
        name: true,
        needs: true,
        occupation: true,
        otherHabits: true,
        personaAge: true,
        productPreferences: true,
        satisfactionLevels: true,
        says: true,
        technologyUsage: true,
        thinks: true,
        updatedAt: true,
        valuedFeatures: true,
        values: true,
        wantsAndGoals: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Persona })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePersona(
    @common.Param() params: PersonaWhereUniqueInput,
    @common.Body() data: PersonaUpdateInput
  ): Promise<Persona | null> {
    try {
      return await this.service.updatePersona({
        where: params,
        data: data,
        select: {
          ageRange: true,
          attitudes: true,
          careerPath: true,
          challengesAndPainPoints: true,
          children: true,
          communicationChannels: true,
          competitorProducts: true,
          completed: true,
          createdAt: true,
          culturalAndSocialInfluences: true,
          currentlyPursuing: true,
          definition: true,
          does: true,
          familyStatus: true,
          featureAnalysis: true,
          feels: true,
          gender: true,
          generalLifestyle: true,
          hobbiesAndInterests: true,
          id: true,
          incomeLevel: true,
          location: true,
          mediaChannels: true,
          missingFeatures: true,
          motivationsAndDesires: true,
          name: true,
          needs: true,
          occupation: true,
          otherHabits: true,
          personaAge: true,
          productPreferences: true,
          satisfactionLevels: true,
          says: true,
          technologyUsage: true,
          thinks: true,
          updatedAt: true,
          valuedFeatures: true,
          values: true,
          wantsAndGoals: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Persona })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePersona(
    @common.Param() params: PersonaWhereUniqueInput
  ): Promise<Persona | null> {
    try {
      return await this.service.deletePersona({
        where: params,
        select: {
          ageRange: true,
          attitudes: true,
          careerPath: true,
          challengesAndPainPoints: true,
          children: true,
          communicationChannels: true,
          competitorProducts: true,
          completed: true,
          createdAt: true,
          culturalAndSocialInfluences: true,
          currentlyPursuing: true,
          definition: true,
          does: true,
          familyStatus: true,
          featureAnalysis: true,
          feels: true,
          gender: true,
          generalLifestyle: true,
          hobbiesAndInterests: true,
          id: true,
          incomeLevel: true,
          location: true,
          mediaChannels: true,
          missingFeatures: true,
          motivationsAndDesires: true,
          name: true,
          needs: true,
          occupation: true,
          otherHabits: true,
          personaAge: true,
          productPreferences: true,
          satisfactionLevels: true,
          says: true,
          technologyUsage: true,
          thinks: true,
          updatedAt: true,
          valuedFeatures: true,
          values: true,
          wantsAndGoals: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
