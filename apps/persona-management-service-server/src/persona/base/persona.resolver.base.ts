/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Persona } from "./Persona";
import { PersonaCountArgs } from "./PersonaCountArgs";
import { PersonaFindManyArgs } from "./PersonaFindManyArgs";
import { PersonaFindUniqueArgs } from "./PersonaFindUniqueArgs";
import { CreatePersonaArgs } from "./CreatePersonaArgs";
import { UpdatePersonaArgs } from "./UpdatePersonaArgs";
import { DeletePersonaArgs } from "./DeletePersonaArgs";
import { PersonaService } from "../persona.service";
@graphql.Resolver(() => Persona)
export class PersonaResolverBase {
  constructor(protected readonly service: PersonaService) {}

  async _personasMeta(
    @graphql.Args() args: PersonaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Persona])
  async personas(
    @graphql.Args() args: PersonaFindManyArgs
  ): Promise<Persona[]> {
    return this.service.personas(args);
  }

  @graphql.Query(() => Persona, { nullable: true })
  async persona(
    @graphql.Args() args: PersonaFindUniqueArgs
  ): Promise<Persona | null> {
    const result = await this.service.persona(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Persona)
  async createPersona(
    @graphql.Args() args: CreatePersonaArgs
  ): Promise<Persona> {
    return await this.service.createPersona({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Persona)
  async updatePersona(
    @graphql.Args() args: UpdatePersonaArgs
  ): Promise<Persona | null> {
    try {
      return await this.service.updatePersona({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Persona)
  async deletePersona(
    @graphql.Args() args: DeletePersonaArgs
  ): Promise<Persona | null> {
    try {
      return await this.service.deletePersona(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
